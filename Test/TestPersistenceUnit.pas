unit TestPersistenceUnit;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, SysUtils, SQLiteTable3, PersistenceUnit, DateUtils, Dialogs;

type
  // Test methods for class TPersistence

  TestTPersistence = class(TTestCase)
  strict private
    FPersistence: TPersistence;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestStartTracking;
    procedure TestStopTracking;
    procedure TestGetTableStatus;
    procedure TestGetTableInitData;
    procedure TestGetClubCard;
    procedure TestClearLog;
    procedure TestLog;
  end;

implementation

procedure TestTPersistence.SetUp;
begin
  FPersistence := TPersistence.Create(ExtractFilePath(ParamStr(0)) + 'test.sqlite');
end;

procedure TestTPersistence.TearDown;
begin
  FPersistence.Free;
  FPersistence := nil;
end;

procedure TestTPersistence.TestStartTracking;
{*
  Проверяет правильность записывания TableId и CardId в БД.
*}
var
  CardId: Integer;
  TableId: Integer;
  RowId: Integer;
begin
  TableId := 1;
  // Проверка со скидочной картой
  CardId := 10309;
  FPersistence.StartTracking(TableId, CardId);
  RowId := FPersistence.Base.GetLastInsertRowID;
  try
    with FPersistence.Stmt do begin
      ClearParams;
      SQL := 'SELECT * FROM timetable WHERE timetableid=:i';
      SetParamInt(':i', RowId);
      PrepareStatement;
      if Assigned(FPersistence.Table) then
        FreeAndNil(FPersistence.Table);
      FPersistence.Table := ExecQuery;
      CheckEquals(TableId, FPersistence.Table.FieldByName['tableid'].AsInteger);
      CheckEquals(CardId, FPersistence.Table.FieldByName['club_cardid'].AsInteger);
      FreeAndNil(FPersistence.Table);
    end;
  finally
    FPersistence.Base.ExecSQL('DELETE FROM timetable WHERE timetableid=:i', [RowId]);
  end;

  // Проверка без карты
  CardId := -1;
  FPersistence.StartTracking(TableId, CardId);
  RowId := FPersistence.Base.GetLastInsertRowID;
  try
    with FPersistence.Stmt do begin
      ClearParams;
      SQL := 'SELECT * FROM timetable WHERE timetableid=:i';
      SetParamInt(':i', RowId);
      PrepareStatement;
      if Assigned(FPersistence.Table) then
        FreeAndNil(FPersistence.Table);
      FPersistence.Table := ExecQuery;
      CheckEquals(TableId, FPersistence.Table.FieldByName['tableid'].AsInteger);
      CheckTrue(FPersistence.Table.FieldByName['club_cardid'].IsNull);
      FreeAndNil(FPersistence.Table);
    end;
  finally
    FPersistence.Base.ExecSQL('DELETE FROM timetable WHERE timetableid=:i', [RowId]);
  end;
end;

procedure TestTPersistence.TestStopTracking;
{*
  Проверяет правильность учета времени после включения и выключения стола
*}
var
  BeginTime: TDateTime;
  TableId: Integer;
  CardId: Integer;
  RowId: Integer;
begin
  TableId := 1;
  CardId := 10309;
  FPersistence.StartTracking(TableId, CardId);
  try
    with FPersistence.Stmt do begin
      RowId := FPersistence.Base.GetLastInsertRowID;
      FPersistence.StopTracking(TableId, BeginTime);

      ClearParams;
      SQL := 'SELECT * FROM timetable WHERE timetableid=:i';
      SetParamInt(':i', RowId);
      PrepareStatement;
      if Assigned(FPersistence.Table) then
        FreeAndNil(FPersistence.Table);
      FPersistence.Table := ExecQuery;

      ClearParams;
      FPersistence.Base.ExecSQL(
        'UPDATE timetable SET begin_time = :t WHERE timetableid=:i',
        [FormatDateTime(
          'yyyy-mm-dd hh:mm:ss',
          IncMinute(FPersistence.Table.FieldByName['end_time'].AsDateTime, -10)
        ),
        RowId]
      );
      FreeAndNil(FPersistence.Table);

      ClearParams;
      SQL := 'SELECT * FROM timetable WHERE timetableid=:i';
      SetParamInt(':i', RowId);
      PrepareStatement;
      FPersistence.Table := ExecQuery;
      CheckEquals(10, FPersistence.Table.FieldByName['minutes'].AsInteger);
      FreeAndNil(FPersistence.Table);
    end;
  finally
    FPersistence.Base.ExecSQL('DELETE FROM timetable WHERE timetableid=:i', [RowId]);
  end;
end;

procedure TestTPersistence.TestGetTableStatus;
var
  CostMultiplier: Double;
  CardId: Integer;
  BeginTime: TDateTime;
  Status: Boolean;
  TableId: Integer;
  RowId: Integer;
begin
  TableId := 1;
  CardId := -1;
  FPersistence.StartTracking(TableId, CardId);
  RowId := FPersistence.Base.GetLastInsertRowID;
  try
    // TODO: Setup method call parameters
    FPersistence.GetTableStatus(TableId, Status, BeginTime, CardId, CostMultiplier);
    CheckEquals(True, Status);
    CheckEquals(-1, CardId);
    CheckEquals(1, CostMultiplier);
    FPersistence.StopTracking(TableId, BeginTime);
    FPersistence.GetTableStatus(TableId, Status, BeginTime, CardId, CostMultiplier);
    CheckEquals(False, Status);
    // TODO: Validate method results
  finally
    FPersistence.Base.ExecSQL('DELETE FROM timetable WHERE timetableid=:i', [RowId]);
  end;
end;

procedure TestTPersistence.TestGetTableInitData;
var
  Inverted: Boolean;
  Pin: Integer;
  BaseCost: Double;
  TableId: Integer;
begin
  // TODO: Setup method call parameters
  TableId := 1;
  FPersistence.GetTableInitData(TableId, BaseCost, Pin, Inverted);
  CheckEquals(200, BaseCost);
  CheckEquals(2, Pin);
  CheckTrue(Inverted);
  // TODO: Validate method results
end;

procedure TestTPersistence.TestGetClubCard;
var
  ReturnValue: TClubCard;
  CardId: Integer;
begin
  // TODO: Setup method call parameters
  CardId := 10309;
  ReturnValue := FPersistence.GetClubCard(CardId);
  CheckEquals(10309, ReturnValue.club_cardid);
  CheckEquals(0, ReturnValue.cost_multiplier);
  CheckEqualsString('Сергеев', ReturnValue.surname);
  CheckEqualsString('Павел', ReturnValue.name);
  CheckEqualsString('Станиславович', ReturnValue.patronymic);
  // TODO: Validate method results
end;

procedure TestTPersistence.TestClearLog;
begin
  FPersistence.Log('test');
  FPersistence.ClearLog;
  CheckEquals(0, FPersistence.Base.GetTable('SELECT * FROM [log]').RowCount);
  // TODO: Validate method results
end;

procedure TestTPersistence.TestLog;
var
  msg: string;
  RowId: Integer;
begin
  // TODO: Setup method call parameters
  msg := 'Test Message';
  FPersistence.Log(msg);
  RowId := FPersistence.Base.GetLastInsertRowID;
  try
    with FPersistence.Stmt do begin
      ClearParams;
      SQL := 'SELECT * FROM log WHERE logid=:i';
      SetParamInt(':i', RowId);
      PrepareStatement;
      if Assigned(FPersistence.Table) then
        FreeAndNil(FPersistence.Table);
      FPersistence.Table := ExecQuery;
      CheckEqualsString(msg, FPersistence.Table.FieldByName['msg'].AsString);
    end;
  finally
    FPersistence.Base.ExecSQL('DELETE FROM [log] WHERE [logid]=:i', [RowId]);
  end;
  // TODO: Validate method results
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTPersistence.Suite);
end.

